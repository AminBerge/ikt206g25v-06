version: '3.8'
services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - webapp
    networks:
      - app_network
  webapp: 
    image: example
    build:
      context: .  # Directory containing Dockerfile
      dockerfile: Dockerfile
#    ports:
#      - "80:80"
#      - "443:443"
    environment:
      ASPNETCORE_HTTP_PORTS: "80"
      ConnectionStrings__DefaultConnection: "Host=db;Port=5432;Database=app_db;Username=postgres;Password=postgrespw;"
#      ASPNETCORE_HTTPS_PORTS: "443"
#      ASPNETCORE_URLS: "http://+:80;https://+:443"
      ASPNETCORE_URLS: "http://+:80"
#      ASPNETCORE_Kestrel__Certificates__Default__Password: "certpassword"
#      ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnetapp.pfx"
      ASPNETCORE_DATA_PROTECTION__KEYRING_PATH: "/root/.aspnet/DataProtection-Keys"
      ASPNETCORE_ENVIRONMENT: "Production"
    volumes:
      - aspnet_data_protection_keys:/root/.aspnet/DataProtection-Keys
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: app_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d  # For initialization scripts
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d app_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - app_network

volumes:
  postgres_data:
  aspnet_data_protection_keys:
  caddy_data:
  caddy_config:
networks:
  app_network:
    driver: bridge